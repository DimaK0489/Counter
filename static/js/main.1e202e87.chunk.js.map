{"version":3,"sources":["components/Counter/Counter.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Redux/counterReducer.ts","components/Button/Button.tsx","components/Display/WindowCounter.tsx","components/Counter/Counter.tsx","components/Display/Display.tsx","components/SettingCounter/SettingsCounter.tsx","App.tsx","reportWebVitals.ts","components/Redux/store.ts","index.tsx","components/SettingCounter/Settings.module.css","components/Display/Window.module.css"],"names":["module","exports","initialState","startValue","maxValue","countValue","Buttons","React","memo","props","className","style","button","disabled","disable","onClick","onClickHandler","title","WindowCounter","condition","window","Counter","action","useDispatch","counterWrapper","screen","type","Display","inputValues","value","onChange","e","setDisabled","onChangeCallback","currentTarget","Settings","classNameInput","inputValue","classNameBlock","checkCondition","localStorage","setItem","toString","App","useState","useSelector","state","count","useEffect","getItem","saveStartValue","Number","saveMaxValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e202e87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter_counterWrapper__3Ki0n\",\"screen\":\"Counter_screen__34sWI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2IZKm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValues\":\"Display_inputValues__2uJJZ\"};","export type initialStateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    countValue: number\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    startValue: 1,\r\n    maxValue: 5,\r\n    countValue: 1,\r\n}\r\n\r\ntype ActionType =\r\n    ReturnType<typeof incrementAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof changedStartValueAC>\r\n    | ReturnType<typeof changedMaxValueAC>\r\n    | ReturnType<typeof setValuesAC>\r\n    | ReturnType<typeof saveStartValue>\r\n    | ReturnType<typeof saveMaxValue>\r\n\r\n\r\nexport const counterReducer = (state = initialState, action: ActionType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"INCREMENT-VALUE\":\r\n            return {\r\n                ...state,\r\n                countValue: state.countValue + 1,\r\n            }\r\n        case \"RESET-VALUE\":\r\n            return {\r\n                ...state,\r\n                countValue: state.startValue\r\n            }\r\n        case \"CHANGE-START-VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"CHANGE-MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        case \"SET-VALUES\":\r\n            return {\r\n                ...state,\r\n                countValue: state.startValue,\r\n                maxValue: state.maxValue\r\n            }\r\n        case \"SAVE-START-VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"SAVE-MAX-VALUE\": {\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const incrementAC = () => {\r\n    return {type: 'INCREMENT-VALUE'} as const\r\n}\r\n\r\nexport const resetAC = () => {\r\n    return {type: 'RESET-VALUE'} as const\r\n}\r\n\r\nexport const changedStartValueAC = (startValue: number) => {\r\n    return {type: 'CHANGE-START-VALUE', startValue} as const\r\n}\r\n\r\nexport const changedMaxValueAC = (maxValue: number) => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxValue} as const\r\n}\r\n\r\nexport const setValuesAC = () => {\r\n    return {type: 'SET-VALUES'} as const\r\n}\r\n\r\nexport const saveStartValue = (startValue: number) => {\r\n    return {type: 'SAVE-START-VALUE', startValue} as const\r\n}\r\n\r\n\r\nexport const saveMaxValue = (maxValue: number) => {\r\n    return {type: 'SAVE-MAX-VALUE', maxValue} as const\r\n}","import React from \"react\";\r\nimport style from \"./Button.module.css\"\r\n\r\ntype ButtonsPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    disable: boolean\r\n}\r\n\r\nexport const Buttons = React.memo((props: ButtonsPropsType) => {\r\n    const callback = () => props.onClickHandler()\r\n    return <button className={style.button}\r\n                   disabled={props.disable}\r\n                   onClick={callback}>\r\n        {props.title}</button>\r\n})","import React from \"react\";\r\nimport style from \"./Window.module.css\"\r\n\r\n\r\ntype WindowCounterPropsType = {\r\n    countValue:number\r\n    maxValue:number\r\n    startValue:number\r\n}\r\n\r\nexport const WindowCounter = React.memo( (props:WindowCounterPropsType) => {\r\n\r\n    const condition = props.startValue < 0 || props.startValue > props.maxValue || props.startValue === props.maxValue\r\n\r\n    return <div className={style.window}>\r\n        <span className={props.countValue < props.maxValue  ? style.startValue : style.maxValue}>{condition ? 'Incorrect Value' : props.countValue}</span>\r\n    </div>\r\n})","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {incrementAC, resetAC} from \"../Redux/counterReducer\";\r\nimport {Buttons} from \"../Button/Button\";\r\nimport {WindowCounter} from \"../Display/WindowCounter\";\r\nimport style from \"./Counter.module.css\"\r\n\r\n\r\ntype CounterPropsType = {\r\n    disabled:boolean\r\n    startValue: number\r\n    maxValue:number\r\n    countValue:number\r\n}\r\n\r\nexport const Counter = React.memo((props:CounterPropsType) => {\r\n\r\n    const action = useDispatch()\r\n    const onClickHandlerInc = () => action(incrementAC())\r\n    const onClickHandlerRes = () => action(resetAC())\r\n\r\n    return <div className={style.counterWrapper}>\r\n\r\n        <WindowCounter startValue={props.startValue} countValue={props.countValue} maxValue={props.maxValue}/>\r\n\r\n        <div className={style.screen}>\r\n\r\n            <Buttons title={'Inc'}\r\n                     disable={props.countValue >= props.maxValue || props.disabled}\r\n                     onClickHandler={onClickHandlerInc}/>\r\n            <Buttons title={'Res'}\r\n                     disable={props.countValue <= props.startValue || props.disabled}\r\n                     onClickHandler={onClickHandlerRes}/>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./Display.module.css\"\r\n\r\n\r\ntype DisplayPropsType = {\r\n    title: string\r\n    classNameInput: string\r\n    classNameBlock: string\r\n    value: number\r\n    onChangeCallback: (inputValue: number) => void\r\n    setDisabled:(boolean: boolean) => void\r\n    checkCondition:string\r\n}\r\n\r\nexport const Display = React.memo( (props: DisplayPropsType) => {\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.setDisabled(true)\r\n        props.onChangeCallback(+e.currentTarget.value)\r\n    }\r\n\r\n    return <div className={style.inputValues}>\r\n        <div> {props.title} </div>\r\n        <input type=\"number\"\r\n               value={props.value}\r\n               onChange={onChangeHandler}/>\r\n    </div>\r\n})","import React from \"react\";\r\nimport style from \"./Settings.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changedMaxValueAC, changedStartValueAC, setValuesAC} from \"../Redux/counterReducer\";\r\nimport {Display} from \"../Display/Display\";\r\nimport {Buttons} from \"../Button/Button\";\r\n\r\ntype SettingsPropsType = {\r\n    setDisabled: (boolean: boolean) => void\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Settings = React.memo((props: SettingsPropsType) => {\r\n\r\n    const action = useDispatch()\r\n\r\n    const onChangeHandlerStart = (inputValue: number) => action(changedStartValueAC(inputValue))\r\n\r\n    const onChangeHandlerMax = (inputValue: number) => action(changedMaxValueAC(inputValue))\r\n\r\n    const setCallback = () => {\r\n        action(setValuesAC())\r\n        localStorage.setItem('startValue', props.startValue.toString())\r\n        localStorage.setItem('maxValue', props.maxValue.toString())\r\n        props.setDisabled(false)\r\n    }\r\n\r\n    const incorrectValue = 'Incorrect Value'\r\n    const condition = props.startValue < 0 || props.startValue > props.maxValue || props.startValue === props.maxValue ? incorrectValue : ''\r\n\r\n    return <div className={style.counterWrapper}>\r\n\r\n        <div className={style.screen}>\r\n            <Display title={'Start Value'}\r\n                     classNameInput={style.inputValues}\r\n                     onChangeCallback={onChangeHandlerStart}\r\n                     classNameBlock={'startValue'}\r\n                     value={props.startValue}\r\n                     setDisabled={props.setDisabled}\r\n                     checkCondition={condition}\r\n            />\r\n\r\n            <Display title={'Max Value'}\r\n                     classNameInput={style.inputValues}\r\n                     onChangeCallback={onChangeHandlerMax}\r\n                     classNameBlock={'maxValue'}\r\n                     value={props.maxValue}\r\n                     setDisabled={props.setDisabled}\r\n                     checkCondition={condition}\r\n            />\r\n        </div>\r\n\r\n        <div className={style.button}>\r\n            <Buttons title={'SET'}\r\n                     disable={props.startValue === props.maxValue\r\n                     || props.startValue > props.maxValue\r\n                     || props.startValue < 0\r\n                     || props.maxValue < 0}\r\n                     onClickHandler={setCallback}/>\r\n        </div>\r\n    </div>\r\n})","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./components/Counter/Counter\";\r\nimport {Settings} from './components/SettingCounter/SettingsCounter';\r\nimport {RootStoreType} from \"./components/Redux/store\";\r\nimport {saveMaxValue, saveStartValue} from \"./components/Redux/counterReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport type StateType = {\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nfunction App() {\r\n    const [disabled, setDisabled] = useState<boolean>(false)\r\n\r\n    const countValue = useSelector<RootStoreType, number>(state => state.count.countValue)\r\n    const maxValue = useSelector<RootStoreType, number>(state => state.count.maxValue)\r\n    const startValue = useSelector<RootStoreType, number>(state => state.count.startValue)\r\n\r\n    const action = useDispatch()\r\n\r\n    useEffect(() => {\r\n        localStorage.getItem('startValue'.toString())\r\n        localStorage.getItem('maxValue'.toString())\r\n\r\n        action(saveStartValue(Number(localStorage.getItem('startValue'))))\r\n        action(saveMaxValue(Number(localStorage.getItem('maxValue'))))\r\n    }, [action])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Settings\r\n                setDisabled={setDisabled} startValue={startValue} maxValue={maxValue}/>\r\n            <Counter\r\n                disabled={disabled} startValue={startValue} maxValue={maxValue} countValue={countValue}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    count:counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './components/Redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Settings_counterWrapper__25dGG\",\"screen\":\"Settings_screen__q25uM\",\"inputValues\":\"Settings_inputValues__dnFXh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startValue\":\"Window_startValue__3yFiC\",\"maxValue\":\"Window_maxValue__1hFz8\",\"window\":\"Window_window__1ZFHG\"};"],"sourceRoot":""}